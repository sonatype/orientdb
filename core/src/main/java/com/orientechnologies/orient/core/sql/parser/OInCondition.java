/* Generated By:JJTree: Do not edit this line. OInCondition.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.command.OCommandContext;
import com.orientechnologies.orient.core.db.record.OIdentifiable;
import com.orientechnologies.orient.core.sql.filter.OSQLTarget;

import java.util.*;

public class OInCondition extends OBooleanExpression {
  protected OExpression            left;
  protected OBinaryCompareOperator operator;
  protected OSelectStatement       rightStatement;
  protected OInputParameter        rightParam;
  protected OMathExpression        rightMathExpression;
  protected Object                 right;

  private static final Object UNSET           = new Object();
  private              Object inputFinalValue = UNSET;

  public OInCondition(int id) {
    super(id);
  }

  public OInCondition(OrientSql p, int id) {
    super(p, id);
  }

  /**
   * Accept the visitor.
   **/
  public Object jjtAccept(OrientSqlVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  @Override public boolean evaluate(OIdentifiable currentRecord, OCommandContext ctx) {
    Object leftValue = left.execute(currentRecord, ctx);
    Object rightValue = null;
    if (rightStatement != null) {
      rightValue = query(rightStatement.toString(), ctx);
    } else if (rightParam != null) {
      rightValue = rightParam.bindFromInputParams(ctx.getInputParameters());
    } else if (rightMathExpression != null) {
      rightValue = rightMathExpression.execute(currentRecord, ctx);
    } else {
      rightValue = right;
    }

    if (rightValue == null) {
      return false;
    } else if (rightValue instanceof Collection) {
      return ((Collection) rightValue).contains(leftValue);
    } else if (rightValue instanceof OIdentifiable) {
      return rightValue.equals(leftValue);
    }
    if (rightValue instanceof Iterable) {
      rightValue = ((Iterable) rightValue).iterator();
    }
    if (rightValue instanceof Iterator) {
      Iterator iter = ((Iterator) rightValue);
      while (iter.hasNext()) {
        Object next = iter.next();
        if (next == null && leftValue == null) {
          return true;
        }
        if (next != null && next.equals(leftValue)) {
          return true;
        }
      }
    }
    return false;
  }

  private Object query(String text, OCommandContext ctx) {
    OSQLTarget target = new OSQLTarget(text, ctx);
    Iterable targetResult = (Iterable) target.getTargetRecords();
    if (targetResult == null) {
      return null;
    }
    return targetResult.iterator();
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    left.toString(params, builder);
    builder.append(" IN ");
    if (rightStatement != null) {
      builder.append("(");
      rightStatement.toString(params, builder);
      builder.append(")");
    } else if (right != null) {
      builder.append(convertToString(right));
    } else if (rightParam != null) {
      rightParam.toString(params, builder);
    } else if (rightMathExpression != null) {
      rightMathExpression.toString(params, builder);
    }
  }

  private String convertToString(Object o) {
    if (o instanceof String) {
      return "\"" + ((String) o).replaceAll("\"", "\\\"") + "\"";
    }
    return o.toString();
  }

  @Override public boolean supportsBasicCalculation() {
    if (!left.supportsBasicCalculation()) {
      return false;
    }
    if (!rightMathExpression.supportsBasicCalculation()) {
      return false;
    }
    if (!operator.supportsBasicCalculation()) {
      return false;
    }

    return true;
  }

  @Override protected int getNumberOfExternalCalculations() {
    int total = 0;
    if (operator != null && !operator.supportsBasicCalculation()) {
      total++;
    }
    if (!left.supportsBasicCalculation()) {
      total++;
    }
    if (rightMathExpression != null && !rightMathExpression.supportsBasicCalculation()) {
      total++;
    }
    return total;
  }

  @Override protected List<Object> getExternalCalculationConditions() {
    List<Object> result = new ArrayList<Object>();

    if (operator != null) {
      result.add(this);
    }
    if (!left.supportsBasicCalculation()) {
      result.add(left);
    }
    if (rightMathExpression != null && !rightMathExpression.supportsBasicCalculation()) {
      result.add(rightMathExpression);
    }
    return result;
  }

}
/* JavaCC - OriginalChecksum=00df7cb1877c0a12d24205c1700653c7 (do not edit this line) */
