/* Generated By:JJTree: Do not edit this line. OCreateViewStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.command.OCommandContext;
import com.orientechnologies.orient.core.db.ODatabaseDocumentInternal;
import com.orientechnologies.orient.core.exception.OCommandExecutionException;
import com.orientechnologies.orient.core.metadata.schema.OSchema;
import com.orientechnologies.orient.core.sql.executor.OInternalResultSet;
import com.orientechnologies.orient.core.sql.executor.OResultInternal;
import com.orientechnologies.orient.core.sql.executor.OResultSet;

import java.util.HashMap;
import java.util.Map;

public class OCreateViewStatement extends ODDLStatement {

  protected OIdentifier name;
  protected OStatement  statement;
  protected boolean ifNotExists = false;
  protected OJson metadata;

  public OCreateViewStatement(int id) {
    super(id);
  }

  public OCreateViewStatement(OrientSql p, int id) {
    super(p, id);
  }

  @Override
  public OResultSet executeDDL(OCommandContext ctx) {
    OSchema schema = ctx.getDatabase().getMetadata().getSchema();
    if (schema.existsView(name.getStringValue())) {
      if (ifNotExists) {
        return new OInternalResultSet();
      } else {
        throw new OCommandExecutionException("View " + name + " already exists");
      }
    }

    if (schema.existsClass(name.getStringValue())) {
      throw new OCommandExecutionException("Cannot create view " + name + ", a class with the same name already exists");
    }

    OResultInternal result = new OResultInternal();
    result.setProperty("operation", "create view");
    result.setProperty("viewName", name.getStringValue());

    schema.createView((ODatabaseDocumentInternal) ctx.getDatabase(), name.getStringValue(), statement.toString(),
        metadata == null ? new HashMap<>() : metadata.toMap(new OResultInternal(), ctx));

    OInternalResultSet rs = new OInternalResultSet();
    rs.add(result);
    return rs;
  }

  @Override
  public OStatement copy() {
    OCreateViewStatement result = new OCreateViewStatement(-1);
    result.name = this.name.copy();
    result.statement = this.statement.copy();
    result.ifNotExists = this.ifNotExists;
    result.metadata = metadata == null ? null : metadata.copy();
    return result;
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("CREATE VIEW ");
    name.toString(params, builder);
    if (ifNotExists) {
      builder.append(" IF NOT EXISTS");
    }
    builder.append(" FROM (");
    statement.toString(params, builder);
    builder.append(")");
    if (metadata != null) {
      builder.append(" METADATA ");
      metadata.toString(params, builder);
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    OCreateViewStatement that = (OCreateViewStatement) o;

    if (ifNotExists != that.ifNotExists)
      return false;
    if (name != null ? !name.equals(that.name) : that.name != null)
      return false;
    if (statement != null ? !statement.equals(that.statement) : that.statement != null)
      return false;
    return metadata != null ? metadata.equals(that.metadata) : that.metadata == null;
  }

  @Override
  public int hashCode() {
    int result = name != null ? name.hashCode() : 0;
    result = 31 * result + (statement != null ? statement.hashCode() : 0);
    result = 31 * result + (ifNotExists ? 1 : 0);
    result = 31 * result + (metadata != null ? metadata.hashCode() : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=a89bf0075fd907075ece2ef20ed1494a (do not edit this line) */
